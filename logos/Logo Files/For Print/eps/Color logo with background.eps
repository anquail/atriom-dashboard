%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 582
%%HiResBoundingBox: 0 0 2371.9199 582
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 582 re
W
q
[0.24 0 0 -0.24 0 582] cm
q
0 0 9883.333 2422.3855 re
W*
q
[3.125624 0 0 3.125325 0.0227144 0] cm
/DeviceRGB {} CS
[0.0118 0.0549 0.1098] SC
/DeviceRGB {} cs
[0.0118 0.0549 0.1098] sc
0 0 3162.0203 775.08282 re
f
Q
q
[21.290684 0 0 21.288643 146.776352 146.739578] cm
q
83.123001 61.333 m
83.123001 38.627998 l
86.941002 38.341 89.960999 35.148998 89.960999 31.259998 c
89.960999 27.181999 86.643997 23.863998 82.565002 23.863998 c
80.051003 23.863998 77.831001 25.126999 76.493004 27.048998 c
56.658001 15.597 l
57.125999 14.627 57.396 13.545 57.396 12.397 c
57.396 8.319 54.077999 5.001 49.999001 5.001 c
45.921001 5.001 42.603001 8.319 42.603001 12.397 c
42.603001 13.544001 42.873001 14.627001 43.341999 15.597 c
23.507 27.049 l
22.17 25.128 19.948 23.865 17.434999 23.865 c
13.355999 23.865 10.039 27.181999 10.039 31.261 c
10.039 35.151001 13.059 38.341999 16.876999 38.628998 c
16.876999 61.334 l
13.058999 61.620998 10.038999 64.813004 10.038999 68.701996 c
10.038999 72.780998 13.355999 76.097992 17.434998 76.097992 c
19.935997 76.097992 22.146997 74.846992 23.486998 72.940994 c
43.342999 84.404991 l
42.873997 85.375992 42.604 86.458992 42.604 87.605988 c
42.604 91.68399 45.922001 95.001984 50 95.001984 c
54.078999 95.001984 57.396999 91.684982 57.396999 87.605988 c
57.396999 86.458984 57.125999 85.375984 56.658001 84.404991 c
76.514 72.939987 l
77.852997 74.846985 80.064003 76.097984 82.566002 76.097984 c
86.644005 76.097984 89.962006 72.780983 89.962006 68.701981 c
89.960999 64.811996 86.941002 61.619999 83.123001 61.333 c
h
76.899002 28.570999 m
77.059006 28.233 77.249001 27.910999 77.464005 27.609999 c
78.606003 26.020998 80.463005 24.98 82.565002 24.98 c
86.028 24.98 88.845001 27.796999 88.845001 31.26 c
88.845001 34.535 86.325005 37.229 83.122002 37.513 c
82.937004 37.528999 82.752998 37.541 82.564003 37.541 c
82.375008 37.541 82.190002 37.528999 82.006004 37.513 c
80.112007 37.345001 78.461006 36.334999 77.425003 34.860001 c
77.212006 34.556999 77.028 34.233002 76.869003 33.893002 c
76.497002 33.091003 76.283005 32.201 76.283005 31.260002 c
76.285004 30.297001 76.510002 29.386999 76.899002 28.570999 c
h
56.661999 46.810001 m
76.455002 35.420002 l
77.689003 37.227001 79.703003 38.455002 82.008003 38.628002 c
82.008003 61.333 l
79.672005 61.508999 77.636002 62.769001 76.406006 64.614998 c
56.639999 53.240002 l
57.118999 52.260002 57.396999 51.163002 57.396999 50.001003 c
57.396 48.856998 57.126999 47.777 56.661999 46.810001 c
h
75.931999 28.011999 m
75.448997 28.993999 75.169998 30.094 75.169998 31.261 c
75.169998 32.404999 75.437996 33.484001 75.903999 34.451 c
56.110001 45.841 l
54.875999 44.034 52.862 42.806999 50.556999 42.632999 c
50.556999 19.764 l
52.859001 19.591 54.868999 18.367001 56.104 16.563999 c
75.931999 28.011999 l
h
56.280998 50.000999 m
56.280998 50.961998 56.056999 51.868 55.670998 52.682999 c
55.509998 53.021999 55.320999 53.342999 55.105999 53.645 c
54.066998 55.095001 52.431 56.085999 50.557999 56.253002 c
50.374001 56.269001 50.188999 56.281002 50 56.281002 c
50 56.281002 50 56.281002 49.999001 56.281002 c
49.811001 56.281002 49.625999 56.268002 49.442001 56.253002 c
47.568001 56.087002 45.932003 55.095001 44.894001 53.646004 c
44.678001 53.344006 44.490002 53.022003 44.329002 52.684002 c
43.943001 51.870003 43.719002 50.962002 43.719002 50.001003 c
43.719002 49.060001 43.933002 48.169003 44.306004 47.367004 c
44.464005 47.028004 44.648003 46.704006 44.862003 46.401005 c
45.899002 44.926006 47.550003 43.916004 49.443005 43.749004 c
49.627003 43.733006 49.812004 43.721004 50.000004 43.721004 c
50.000004 43.721004 50.000004 43.721004 50.001003 43.721004 c
50.189003 43.721004 50.375004 43.733006 50.559002 43.749004 c
52.452003 43.917004 54.103001 44.927006 55.140003 46.401005 c
55.353004 46.704006 55.537003 47.028004 55.696003 47.367004 c
56.066002 48.168999 56.280998 49.060001 56.280998 50.000999 c
h
49.999001 6.116 m
53.462002 6.116 56.281002 8.933001 56.281002 12.397 c
56.281002 13.341001 56.065002 14.234 55.690002 15.038 c
55.533001 15.377 55.346001 15.701 55.132004 16.004 c
54.096004 17.473999 52.446003 18.480999 50.557003 18.649 c
50.373005 18.666 50.188004 18.677 49.999004 18.677 c
49.999004 18.677 49.999004 18.677 49.998005 18.677 c
49.810005 18.677 49.625004 18.665001 49.441006 18.649 c
47.551006 18.482 45.902004 17.476 44.865005 16.005001 c
44.652004 15.701001 44.466007 15.378001 44.308006 15.039002 c
43.933006 14.235002 43.718006 13.342001 43.718006 12.398002 c
43.719002 8.934 46.535999 6.116 49.999001 6.116 c
h
43.896 16.563999 m
45.130001 18.366999 47.141998 19.591 49.443001 19.764 c
49.443001 42.632999 l
47.138 42.806 45.124001 44.034 43.889999 45.841 c
24.098 34.451 l
24.563 33.484001 24.831999 32.403999 24.831999 31.261 c
24.831999 30.094 24.552999 28.993999 24.07 28.011999 c
43.896 16.563999 l
h
43.361 53.240002 m
23.594 64.614998 l
22.365 62.766998 20.327999 61.508999 17.993 61.332996 c
17.993 38.627998 l
20.298 38.454998 22.312 37.226997 23.546 35.419998 c
43.337997 46.809998 l
42.871998 47.777996 42.603996 48.856998 42.603996 49.999996 c
42.604 51.164001 42.881001 52.261002 43.361 53.240002 c
h
11.154 31.26 m
11.154 27.797001 13.972 24.98 17.435001 24.98 c
19.536001 24.98 21.395 26.021 22.536001 27.608999 c
22.752001 27.91 22.941002 28.231998 23.102001 28.57 c
23.492001 29.386999 23.716002 30.296999 23.716002 31.26 c
23.716002 32.201 23.502001 33.091999 23.130001 33.894001 c
22.973001 34.233002 22.788002 34.556999 22.574001 34.861 c
21.538002 36.335999 19.886002 37.345001 17.993002 37.513 c
17.809002 37.528999 17.624002 37.541 17.435001 37.541 c
17.246 37.541 17.061001 37.528999 16.877001 37.513 c
13.675 37.229 11.154 34.535 11.154 31.26 c
h
23.087 71.420998 m
22.924 71.758995 22.733 72.078995 22.514999 72.379997 c
21.372 73.952995 19.522999 74.982994 17.434 74.982994 c
13.971 74.982994 11.153 72.165993 11.153 68.701996 c
11.153 65.427994 13.674 62.731995 16.875999 62.448997 c
17.059999 62.432999 17.244999 62.420998 17.434 62.420998 c
17.623001 62.420998 17.808001 62.433998 17.992001 62.448997 c
19.916 62.618996 21.593 63.657997 22.625999 65.172997 c
22.834999 65.478996 23.014999 65.806999 23.167999 66.148994 c
23.517 66.929993 23.716 67.793991 23.716 68.702995 c
23.716 69.676003 23.486 70.597 23.087 71.420998 c
h
24.055 71.978996 m
24.547001 70.990997 24.830999 69.878998 24.830999 68.700996 c
24.830999 67.589996 24.577999 66.536995 24.136 65.590996 c
43.921997 54.203995 l
45.158997 55.986996 47.156998 57.196995 49.442997 57.367996 c
49.442997 80.237 l
47.141998 80.408997 45.130997 81.633003 43.896996 83.435997 c
24.055 71.978996 l
h
49.999001 93.886002 m
46.535999 93.886002 43.719002 91.069 43.719002 87.606003 c
43.719002 86.661003 43.935001 85.767006 44.310001 84.963005 c
44.469002 84.623009 44.654003 84.300003 44.867001 83.997002 c
45.903999 82.525002 47.553001 81.519005 49.443001 81.352005 c
49.626999 81.336006 49.812 81.324005 50 81.324005 c
50 81.324005 50 81.324005 50.000999 81.324005 c
50.188999 81.324005 50.375 81.337006 50.558998 81.352005 c
52.447998 81.520004 54.095997 82.527008 55.132999 83.997002 c
55.348 84.300003 55.531998 84.623001 55.690998 84.963005 c
56.066998 85.767006 56.282997 86.660004 56.282997 87.606003 c
56.280998 91.068001 53.462002 93.886002 49.999001 93.886002 c
h
56.104 83.436996 m
54.869999 81.634995 52.858002 80.411995 50.557999 80.237999 c
50.557999 57.368 l
52.842999 57.195999 54.841 55.985001 56.077999 54.203999 c
75.864998 65.590996 l
75.424995 66.536995 75.170998 67.589996 75.170998 68.700996 c
75.170998 69.879997 75.454994 70.988998 75.945999 71.978996 c
56.104 83.436996 l
h
82.565002 74.982002 m
80.476006 74.982002 78.626999 73.953003 77.484001 72.378006 c
77.265999 72.078003 77.076004 71.758003 76.912003 71.421005 c
76.514999 70.597008 76.285004 69.676003 76.285004 68.701004 c
76.285004 67.792007 76.483002 66.930008 76.833 66.147003 c
76.985001 65.805 77.165001 65.478004 77.374001 65.172005 c
78.406998 63.656006 80.084 62.617004 82.008003 62.447006 c
82.192001 62.431007 82.377007 62.419006 82.566002 62.419006 c
82.754997 62.419006 82.939003 62.432007 83.124001 62.447006 c
86.327003 62.730007 88.847 65.42601 88.847 68.700005 c
88.846001 72.165001 86.028 74.982002 82.565002 74.982002 c
h
W
[79.923007 0 0 90.000988 10.038999 5.001012] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[42.05925 0 0 42.055218 2658.782 119.798218] cm
q
6 32.799999 m
3.6 40 l
0.6 40 l
0.6 38.799999 l
10.4 12 l
13.799999 12 l
23.599998 38.799999 l
23.599998 40 l
20.599998 40 l
18.199999 32.799999 l
5.999999 32.799999 l
6 32.799999 l
h
17.200001 30.200001 m
12.200001 15.6 l
12.000001 15.6 l
7.000001 30.200001 l
17.200001 30.200001 l
h
40.75 14.6 m
40.75 40 l
37.75 40 l
37.75 14.6 l
28.950001 14.6 l
28.950001 12 l
49.550003 12 l
49.550003 13.8 l
48.750004 14.6 l
40.750004 14.6 l
40.75 14.6 l
h
61.299999 40 m
58.299999 40 l
58.299999 12 l
70.699997 12 l
74.899994 12 77.699997 14.8 77.699997 18.6 c
77.699997 22.4 l
77.699997 28 72.299995 28.799999 72.299995 28.799999 c
78.499992 38.799999 l
78.499992 40 l
75.499992 40 l
69.299995 29 l
61.299995 29 l
61.299995 40 l
61.299999 40 l
h
70.699997 14.6 m
61.299995 14.6 l
61.299995 26.400002 l
70.699997 26.400002 l
72.899994 26.400002 74.699997 24.600002 74.699997 22.400002 c
74.699997 18.600002 l
74.699997 16.400001 72.899994 14.600002 70.699997 14.600002 c
70.699997 14.6 l
h
91.849998 40 m
88.849998 40 l
88.849998 12 l
91.849998 12 l
91.849998 40 l
h
103.400002 33.799999 m
103.400002 18.199999 l
103.400002 14.399999 106.200005 11.599999 110.400002 11.599999 c
117.400002 11.599999 l
121.599998 11.599999 124.400002 14.399999 124.400002 18.199999 c
124.400002 33.799999 l
124.400002 37.599998 121.599998 40.399998 117.400002 40.399998 c
110.400002 40.399998 l
106.200005 40.399998 103.400002 37.599998 103.400002 33.799999 c
h
121.400002 33.799999 m
121.400002 18.199999 l
121.400002 15.999999 119.599998 14.199999 117.400002 14.199999 c
110.400002 14.199999 l
108.200005 14.199999 106.400002 15.999999 106.400002 18.199999 c
106.400002 33.799999 l
106.400002 36 108.200005 37.799999 110.400002 37.799999 c
117.400002 37.799999 l
119.599998 37.799999 121.400002 36 121.400002 33.799999 c
h
151.550003 36.200001 m
148.550003 36.200001 l
140.350006 16.6 l
140.150009 16.6 l
137.350006 40 l
134.350006 40 l
134.350006 38.799999 l
137.950012 12 l
141.550018 12 l
149.950012 32.200001 l
150.150009 32.200001 l
158.550003 12 l
162.150009 12 l
165.750015 38.799999 l
165.750015 40 l
162.750015 40 l
159.950012 16.6 l
159.750015 16.6 l
151.550003 36.200001 l
h
W
[165.150018 0 0 28.800002 0.599999 11.600002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.04 mul 0.078 add
1 index 1 exp 0.51 mul 0.49 add
2 index 1 exp 0.576 mul 0.424 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
